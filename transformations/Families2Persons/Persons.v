(* Automatically generated by Ecore2Coq transformation. *)

(** Imports Native *)
Require Import String.
Require Import Bool.
Require Import List.
Require Import PeanoNat.
Require Import EqNat.

(** Imports CoqTL *)
Require Import core.utils.Utils.
Require Import core.Metamodel.
Require Import core.modeling.ModelingMetamodel.
Require Import core.Model.

(** Base types for elements *)
Record Person_t := { Person_fullName : string }.
Scheme Equality for Person_t.


Record Male_t := (* manually added ; eSuperTypes not supported by the generator *) { Male_person : Person_t }.
Scheme Equality for Male_t.


Record Female_t :=  (* manually added ; eSuperTypes not supported by the generator *) { Female_person : Person_t }.
Scheme Equality for Female_t.



(** Base types for links *)

(** Data types for element (to build models) *)
Inductive Element : Set :=
  | PersonElement : Person_t -> Element
  | MaleElement : Male_t -> Element
  | FemaleElement : Female_t -> Element
.
Scheme Equality for Element.

(** Data types for link (to build models) *)
Inductive Link : Set :=
.

(** Meta-types (or kinds, to be used in rules) *)
Inductive ElementKind : Set :=
  | Person_K
  | Male_K
  | Female_K
.
Scheme Equality for ElementKind.


Inductive LinkKind : Set :=
.
Scheme Equality for LinkKind.

(** Reflective functions (typing : correspondence between abstract types (kinds) and model data) *)
Definition getTypeByEKind (k : ElementKind) : Set :=
  match k with
  | Person_K => Person_t
  | Male_K => Male_t
  | Female_K => Female_t
  end.


Definition lift_EKind k : (getTypeByEKind k) -> Element := 
  match k with
  | Person_K => PersonElement
  | Male_K => MaleElement
  | Female_K => FemaleElement
  end.


Definition get_E_data (k : ElementKind) (c : Element) : option (getTypeByEKind k) :=
  match (k,c) as e return (option (getTypeByEKind (fst e))) with
  | (Person_K, PersonElement v)  => Some v
  | (Male_K, MaleElement v)  => Some v
  | (Female_K, FemaleElement v)  => Some v
  | (_ , _) => None
  end.


Definition getTypeByLKind (k : LinkKind) : Set :=
  match k with
  end.


Definition lift_LKind k : (getTypeByLKind k) -> Link :=
  match k with
  end.


Definition get_L_data (t : LinkKind) (c : Link) : option (getTypeByLKind t) :=
  match (t,c) as e return (option (getTypeByLKind (fst e))) with
  | (_ , _) => None
  end.

(** Typeclass Instance *)
Definition MM : Metamodel :=
{|
  ElementType := Element ;
  LinkType := Link ;
  elements_eq_dec := Element_eq_dec ;
|}.


#[export]
Instance PersonsElementDenotation : Denotation Element ElementKind :=
{
  denoteDatatype := getTypeByEKind ;
  unbox := get_E_data ;
  constructor := lift_EKind ;
}.


#[export]
Instance PersonsLinkDenotation : Denotation Link LinkKind :=
{
  denoteDatatype := getTypeByLKind ;
  unbox := get_L_data ;
  constructor := lift_LKind ;
}.


#[export]
Instance MMM : ModelingMetamodel MM :=
{
  elements := PersonsElementDenotation ;
  links := PersonsLinkDenotation ;
}.


Definition M := Model MM.

(** General functions (used in transformations) *)

