(* Automatically generated by Ecore2Coq transformation. *)

(** Imports Native *)
Require Import String.
Require Import Bool.
Require Import List.
Require Import PeanoNat.
Require Import EqNat.

(** Imports CoqTL *)
Require Import core.utils.Utils.
Require Import core.Metamodel.
Require Import core.modeling.ModelingMetamodel.
Require Import core.Model.

(** Base types for elements *)
Record Person_t := { Person_name : string }.
Scheme Equality for Person_t.


Record Actor_t := {  }.
Scheme Equality for Actor_t.


Record Actress_t := {  }.
Scheme Equality for Actress_t.


Record Couple_t := {  }.
Scheme Equality for Couple_t.


Record Movie_t := { Movie_title : string ; Movie_rating : nat ; Movie_year : nat ; Movie_type : nat }.
Scheme Equality for Movie_t.


Record Group_t := { Group_avgRating : nat }.
Scheme Equality for Group_t.


Record Clique_t := {  }.
Scheme Equality for Clique_t.



(** Base types for links *)
Record Person_movies_t := { Person_movies_t_lglue : Person_t ; Person_movies_t_rglue : list Movie_t }.


Record Couple_p1_t := { Couple_p1_t_lglue : Couple_t ; Couple_p1_t_rglue : Person_t }.


Record Couple_p2_t := { Couple_p2_t_lglue : Couple_t ; Couple_p2_t_rglue : Person_t }.


Record Movie_persons_t := { Movie_persons_t_lglue : Movie_t ; Movie_persons_t_rglue : list Person_t }.


Record Group_commonMovies_t := { Group_commonMovies_t_lglue : Group_t ; Group_commonMovies_t_rglue : list Movie_t }.


Record Clique_persons_t := { Clique_persons_t_lglue : Clique_t ; Clique_persons_t_rglue : list Person_t }.



(** Data types for element (to build models) *)
Inductive Element : Set :=
  | PersonElement : Person_t -> Element
  | ActorElement : Actor_t -> Element
  | ActressElement : Actress_t -> Element
  | CoupleElement : Couple_t -> Element
  | MovieElement : Movie_t -> Element
  | GroupElement : Group_t -> Element
  | CliqueElement : Clique_t -> Element
.
Scheme Equality for Element.

(** Data types for link (to build models) *)
Inductive Link : Set :=
  | Person_moviesLink : Person_movies_t -> Link
  | Couple_p1Link : Couple_p1_t -> Link
  | Couple_p2Link : Couple_p2_t -> Link
  | Movie_personsLink : Movie_persons_t -> Link
  | Group_commonMoviesLink : Group_commonMovies_t -> Link
  | Clique_personsLink : Clique_persons_t -> Link
.

(** Meta-types (or kinds, to be used in rules) *)
Inductive ElementKind : Set :=
  | Person_K
  | Actor_K
  | Actress_K
  | Couple_K
  | Movie_K
  | Group_K
  | Clique_K
.
Scheme Equality for ElementKind.


Inductive LinkKind : Set :=
  | Person_movies_K
  | Couple_p1_K
  | Couple_p2_K
  | Movie_persons_K
  | Group_commonMovies_K
  | Clique_persons_K
.
Scheme Equality for LinkKind.

(** Reflective functions (typing : correspondence between abstract types (kinds) and model data) *)
Definition getTypeByEKind (k : ElementKind) : Set :=
  match k with
  | Person_K => Person_t
  | Actor_K => Actor_t
  | Actress_K => Actress_t
  | Couple_K => Couple_t
  | Movie_K => Movie_t
  | Group_K => Group_t
  | Clique_K => Clique_t
  end.


Definition lift_EKind k : (getTypeByEKind k) -> Element := 
  match k with
  | Person_K => PersonElement
  | Actor_K => ActorElement
  | Actress_K => ActressElement
  | Couple_K => CoupleElement
  | Movie_K => MovieElement
  | Group_K => GroupElement
  | Clique_K => CliqueElement
  end.


Definition get_E_data (k : ElementKind) (c : Element) : option (getTypeByEKind k) :=
  match (k,c) as e return (option (getTypeByEKind (fst e))) with
  | (Person_K, PersonElement v)  => Some v
  | (Actor_K, ActorElement v)  => Some v
  | (Actress_K, ActressElement v)  => Some v
  | (Couple_K, CoupleElement v)  => Some v
  | (Movie_K, MovieElement v)  => Some v
  | (Group_K, GroupElement v)  => Some v
  | (Clique_K, CliqueElement v)  => Some v
  | (_ , _) => None
  end.


Definition getTypeByLKind (k : LinkKind) : Set :=
  match k with
  | Person_movies_K => Person_movies_t
  | Couple_p1_K => Couple_p1_t
  | Couple_p2_K => Couple_p2_t
  | Movie_persons_K => Movie_persons_t
  | Group_commonMovies_K => Group_commonMovies_t
  | Clique_persons_K => Clique_persons_t
  end.


Definition lift_LKind k : (getTypeByLKind k) -> Link :=
  match k with
  | Person_movies_K => Person_moviesLink
  | Couple_p1_K => Couple_p1Link
  | Couple_p2_K => Couple_p2Link
  | Movie_persons_K => Movie_personsLink
  | Group_commonMovies_K => Group_commonMoviesLink
  | Clique_persons_K => Clique_personsLink
  end.


Definition get_L_data (t : LinkKind) (c : Link) : option (getTypeByLKind t) :=
  match (t,c) as e return (option (getTypeByLKind (fst e))) with
  | (Person_movies_K, Person_moviesLink v)  => Some v
  | (Couple_p1_K, Couple_p1Link v)  => Some v
  | (Couple_p2_K, Couple_p2Link v)  => Some v
  | (Movie_persons_K, Movie_personsLink v)  => Some v
  | (Group_commonMovies_K, Group_commonMoviesLink v)  => Some v
  | (Clique_persons_K, Clique_personsLink v)  => Some v
  | (_ , _) => None
  end.

(** Typeclass Instance *)
Definition MM : Metamodel :=
{|
  ElementType := Element ;
  LinkType := Link ;
  elements_eq_dec := Element_eq_dec ;
|}.


#[export]
Instance moviesElementDenotation : Denotation Element ElementKind :=
{
  denoteDatatype := getTypeByEKind ;
  unbox := get_E_data ;
  constructor := lift_EKind ;
}.


#[export]
Instance moviesLinkDenotation : Denotation Link LinkKind :=
{
  denoteDatatype := getTypeByLKind ;
  unbox := get_L_data ;
  constructor := lift_LKind ;
}.


#[export]
Instance MMM : ModelingMetamodel MM :=
{
  elements := moviesElementDenotation ;
  links := moviesLinkDenotation ;
}.


Definition M := Model MM.

(** General functions (used in transformations) *)
Fixpoint getPerson_moviesOnLinks (p : Person_t) (l : list Link) : option (list Movie_t) :=
 match l with
  | (Person_moviesLink x) :: l1 =>
    if Person_t_beq x.(Person_movies_t_lglue) p
      then (Some x.(Person_movies_t_rglue))
      else getPerson_moviesOnLinks p l1
  | _ :: l1 => getPerson_moviesOnLinks p l1
  | nil => None
 end.


Definition getPerson_movies (m : M) (p : Person_t) : option (list Movie_t) :=
  getPerson_moviesOnLinks p m.(modelLinks).


Fixpoint getCouple_p1OnLinks (c : Couple_t) (l : list Link) : option (Person_t) :=
 match l with
  | (Couple_p1Link x) :: l1 =>
    if Couple_t_beq x.(Couple_p1_t_lglue) c
      then (Some x.(Couple_p1_t_rglue))
      else getCouple_p1OnLinks c l1
  | _ :: l1 => getCouple_p1OnLinks c l1
  | nil => None
 end.


Definition getCouple_p1 (m : M) (c : Couple_t) : option (Person_t) :=
  getCouple_p1OnLinks c m.(modelLinks).


Fixpoint getCouple_p2OnLinks (c : Couple_t) (l : list Link) : option (Person_t) :=
 match l with
  | (Couple_p2Link x) :: l1 =>
    if Couple_t_beq x.(Couple_p2_t_lglue) c
      then (Some x.(Couple_p2_t_rglue))
      else getCouple_p2OnLinks c l1
  | _ :: l1 => getCouple_p2OnLinks c l1
  | nil => None
 end.


Definition getCouple_p2 (m : M) (c : Couple_t) : option (Person_t) :=
  getCouple_p2OnLinks c m.(modelLinks).


Fixpoint getMovie_personsOnLinks (m : Movie_t) (l : list Link) : option (list Person_t) :=
 match l with
  | (Movie_personsLink x) :: l1 =>
    if Movie_t_beq x.(Movie_persons_t_lglue) m
      then (Some x.(Movie_persons_t_rglue))
      else getMovie_personsOnLinks m l1
  | _ :: l1 => getMovie_personsOnLinks m l1
  | nil => None
 end.


Definition getMovie_persons (_m : M) (m : Movie_t) : option (list Person_t) :=
  getMovie_personsOnLinks m _m.(modelLinks).


Fixpoint getGroup_commonMoviesOnLinks (g : Group_t) (l : list Link) : option (list Movie_t) :=
 match l with
  | (Group_commonMoviesLink x) :: l1 =>
    if Group_t_beq x.(Group_commonMovies_t_lglue) g
      then (Some x.(Group_commonMovies_t_rglue))
      else getGroup_commonMoviesOnLinks g l1
  | _ :: l1 => getGroup_commonMoviesOnLinks g l1
  | nil => None
 end.


Definition getGroup_commonMovies (m : M) (g : Group_t) : option (list Movie_t) :=
  getGroup_commonMoviesOnLinks g m.(modelLinks).


Fixpoint getClique_personsOnLinks (c : Clique_t) (l : list Link) : option (list Person_t) :=
 match l with
  | (Clique_personsLink x) :: l1 =>
    if Clique_t_beq x.(Clique_persons_t_lglue) c
      then (Some x.(Clique_persons_t_rglue))
      else getClique_personsOnLinks c l1
  | _ :: l1 => getClique_personsOnLinks c l1
  | nil => None
 end.


Definition getClique_persons (m : M) (c : Clique_t) : option (list Person_t) :=
  getClique_personsOnLinks c m.(modelLinks).



