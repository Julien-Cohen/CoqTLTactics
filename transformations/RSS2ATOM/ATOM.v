(* Automatically generated by Ecore2Coq transformation. *)

(** Imports Native *)
Require Import String.
Require Import Bool.
Require Import List.
Require Import PeanoNat.
Require Import EqNat.

(** Imports CoqTL *)
Require Import core.utils.Utils.
Require Import core.Metamodel.
Require Import core.modeling.ModelingMetamodel.
Require Import core.Model.

(** Base types for elements *)
Record ATOM_t := { ATOM_title : string ; ATOM_id : string ; ATOM_subtitle : string ; ATOM_rights : string ; ATOM_icon : string ; ATOM_logo : string ; ATOM_lastUpdate : string }.
Scheme Equality for ATOM_t.


Record Entry_t := { Entry_title : string ; Entry_id : string ; Entry_rights : string ; Entry_summary : string ; Entry_published : string ; Entry_lastUpdate : string }.
Scheme Equality for Entry_t.


Record Source_t := { Source_id : string ; Source_icon : string ; Source_logo : string ; Source_rights : string ; Source_title : string ; Source_subtitle : string ; Source_lastUpdate : string }.
Scheme Equality for Source_t.


Record Content_t := { Content_type : string ; Content_mode : string ; Content_text : string }.
Scheme Equality for Content_t.


Record InLineTextContent_t := {  }.
Scheme Equality for InLineTextContent_t.


Record InLineXHTMLContent_t := {  }.
Scheme Equality for InLineXHTMLContent_t.


Record InLineOtherContent_t := {  }.
Scheme Equality for InLineOtherContent_t.


Record OutOfLineContent_t := { OutOfLineContent_src : string }.
Scheme Equality for OutOfLineContent_t.


Record Generator_t := { Generator_uri : string ; Generator_version : string ; Generator_name : string }.
Scheme Equality for Generator_t.


Record Category_t := { Category_term : string ; Category_scheme : string ; Category_label : string }.
Scheme Equality for Category_t.


Record Link_t := { Link_rel : string ; Link_hrefl : string ; Link_type : string ; Link_hreflang : string ; Link_title : string ; Link_lenght : nat }.
Scheme Equality for Link_t.


Record Person_t := { Person_name : string ; Person_uri : string ; Person_email : string }.
Scheme Equality for Person_t.


Record Author_t := {  }.
Scheme Equality for Author_t.


Record Contributor_t := {  }.
Scheme Equality for Contributor_t.



(** Base types for links *)
Record ATOM_links_t := { ATOM_links_t_lglue : ATOM_t ; ATOM_links_t_rglue : list Link_t }.


Record ATOM_generator_t := { ATOM_generator_t_lglue : ATOM_t ; ATOM_generator_t_rglue : Generator_t }.


Record ATOM_categories_t := { ATOM_categories_t_lglue : ATOM_t ; ATOM_categories_t_rglue : list Category_t }.


Record ATOM_authors_t := { ATOM_authors_t_lglue : ATOM_t ; ATOM_authors_t_rglue : list Author_t }.


Record ATOM_contributors_t := { ATOM_contributors_t_lglue : ATOM_t ; ATOM_contributors_t_rglue : list Contributor_t }.


Record ATOM_entrie_t := { ATOM_entrie_t_lglue : ATOM_t ; ATOM_entrie_t_rglue : list Entry_t }.


Record Entry_links_t := { Entry_links_t_lglue : Entry_t ; Entry_links_t_rglue : list Link_t }.


Record Entry_source_t := { Entry_source_t_lglue : Entry_t ; Entry_source_t_rglue : Source_t }.


Record Entry_content_t := { Entry_content_t_lglue : Entry_t ; Entry_content_t_rglue : Content_t }.


Record Entry_categories_t := { Entry_categories_t_lglue : Entry_t ; Entry_categories_t_rglue : list Category_t }.


Record Entry_authors_t := { Entry_authors_t_lglue : Entry_t ; Entry_authors_t_rglue : list Author_t }.


Record Entry_contributors_t := { Entry_contributors_t_lglue : Entry_t ; Entry_contributors_t_rglue : list Contributor_t }.


Record Entry_atom_t := { Entry_atom_t_lglue : Entry_t ; Entry_atom_t_rglue : ATOM_t }.


Record Source_links_t := { Source_links_t_lglue : Source_t ; Source_links_t_rglue : list Link_t }.


Record Source_generator_t := { Source_generator_t_lglue : Source_t ; Source_generator_t_rglue : Generator_t }.


Record Source_contributors_t := { Source_contributors_t_lglue : Source_t ; Source_contributors_t_rglue : list Contributor_t }.


Record Source_categories_t := { Source_categories_t_lglue : Source_t ; Source_categories_t_rglue : list Category_t }.


Record Source_author_t := { Source_author_t_lglue : Source_t ; Source_author_t_rglue : Author_t }.


Record Category_atom_t := { Category_atom_t_lglue : Category_t ; Category_atom_t_rglue : ATOM_t }.


Record Category_entry_t := { Category_entry_t_lglue : Category_t ; Category_entry_t_rglue : Entry_t }.


Record Link_atom_t := { Link_atom_t_lglue : Link_t ; Link_atom_t_rglue : ATOM_t }.


Record Link_entry_t := { Link_entry_t_lglue : Link_t ; Link_entry_t_rglue : Entry_t }.


Record Author_atom_t := { Author_atom_t_lglue : Author_t ; Author_atom_t_rglue : ATOM_t }.



(** Data types for element (to build models) *)
Inductive Element : Set :=
  | ATOMElement : ATOM_t -> Element
  | EntryElement : Entry_t -> Element
  | SourceElement : Source_t -> Element
  | ContentElement : Content_t -> Element
  | InLineTextContentElement : InLineTextContent_t -> Element
  | InLineXHTMLContentElement : InLineXHTMLContent_t -> Element
  | InLineOtherContentElement : InLineOtherContent_t -> Element
  | OutOfLineContentElement : OutOfLineContent_t -> Element
  | GeneratorElement : Generator_t -> Element
  | CategoryElement : Category_t -> Element
  | LinkElement : Link_t -> Element
  | PersonElement : Person_t -> Element
  | AuthorElement : Author_t -> Element
  | ContributorElement : Contributor_t -> Element
.
Scheme Equality for Element.

(** Data types for link (to build models) *)
Inductive Link : Set :=
  | ATOM_linksLink : ATOM_links_t -> Link
  | ATOM_generatorLink : ATOM_generator_t -> Link
  | ATOM_categoriesLink : ATOM_categories_t -> Link
  | ATOM_authorsLink : ATOM_authors_t -> Link
  | ATOM_contributorsLink : ATOM_contributors_t -> Link
  | ATOM_entrieLink : ATOM_entrie_t -> Link
  | Entry_linksLink : Entry_links_t -> Link
  | Entry_sourceLink : Entry_source_t -> Link
  | Entry_contentLink : Entry_content_t -> Link
  | Entry_categoriesLink : Entry_categories_t -> Link
  | Entry_authorsLink : Entry_authors_t -> Link
  | Entry_contributorsLink : Entry_contributors_t -> Link
  | Entry_atomLink : Entry_atom_t -> Link
  | Source_linksLink : Source_links_t -> Link
  | Source_generatorLink : Source_generator_t -> Link
  | Source_contributorsLink : Source_contributors_t -> Link
  | Source_categoriesLink : Source_categories_t -> Link
  | Source_authorLink : Source_author_t -> Link
  | Category_atomLink : Category_atom_t -> Link
  | Category_entryLink : Category_entry_t -> Link
  | Link_atomLink : Link_atom_t -> Link
  | Link_entryLink : Link_entry_t -> Link
  | Author_atomLink : Author_atom_t -> Link
.

(** Meta-types (or kinds, to be used in rules) *)
Inductive ElementKind : Set :=
  | ATOM_K
  | Entry_K
  | Source_K
  | Content_K
  | InLineTextContent_K
  | InLineXHTMLContent_K
  | InLineOtherContent_K
  | OutOfLineContent_K
  | Generator_K
  | Category_K
  | Link_K
  | Person_K
  | Author_K
  | Contributor_K
.
Scheme Equality for ElementKind.


Inductive LinkKind : Set :=
  | ATOM_links_K
  | ATOM_generator_K
  | ATOM_categories_K
  | ATOM_authors_K
  | ATOM_contributors_K
  | ATOM_entrie_K
  | Entry_links_K
  | Entry_source_K
  | Entry_content_K
  | Entry_categories_K
  | Entry_authors_K
  | Entry_contributors_K
  | Entry_atom_K
  | Source_links_K
  | Source_generator_K
  | Source_contributors_K
  | Source_categories_K
  | Source_author_K
  | Category_atom_K
  | Category_entry_K
  | Link_atom_K
  | Link_entry_K
  | Author_atom_K
.
Scheme Equality for LinkKind.

(** Reflective functions (typing : correspondence between abstract types (kinds) and model data) *)
Definition getTypeByEKind (k : ElementKind) : Set :=
  match k with
  | ATOM_K => ATOM_t
  | Entry_K => Entry_t
  | Source_K => Source_t
  | Content_K => Content_t
  | InLineTextContent_K => InLineTextContent_t
  | InLineXHTMLContent_K => InLineXHTMLContent_t
  | InLineOtherContent_K => InLineOtherContent_t
  | OutOfLineContent_K => OutOfLineContent_t
  | Generator_K => Generator_t
  | Category_K => Category_t
  | Link_K => Link_t
  | Person_K => Person_t
  | Author_K => Author_t
  | Contributor_K => Contributor_t
  end.


Definition lift_EKind k : (getTypeByEKind k) -> Element := 
  match k with
  | ATOM_K => ATOMElement
  | Entry_K => EntryElement
  | Source_K => SourceElement
  | Content_K => ContentElement
  | InLineTextContent_K => InLineTextContentElement
  | InLineXHTMLContent_K => InLineXHTMLContentElement
  | InLineOtherContent_K => InLineOtherContentElement
  | OutOfLineContent_K => OutOfLineContentElement
  | Generator_K => GeneratorElement
  | Category_K => CategoryElement
  | Link_K => LinkElement
  | Person_K => PersonElement
  | Author_K => AuthorElement
  | Contributor_K => ContributorElement
  end.


Definition get_E_data (k : ElementKind) (c : Element) : option (getTypeByEKind k) :=
  match (k,c) as e return (option (getTypeByEKind (fst e))) with
  | (ATOM_K, ATOMElement v)  => Some v
  | (Entry_K, EntryElement v)  => Some v
  | (Source_K, SourceElement v)  => Some v
  | (Content_K, ContentElement v)  => Some v
  | (InLineTextContent_K, InLineTextContentElement v)  => Some v
  | (InLineXHTMLContent_K, InLineXHTMLContentElement v)  => Some v
  | (InLineOtherContent_K, InLineOtherContentElement v)  => Some v
  | (OutOfLineContent_K, OutOfLineContentElement v)  => Some v
  | (Generator_K, GeneratorElement v)  => Some v
  | (Category_K, CategoryElement v)  => Some v
  | (Link_K, LinkElement v)  => Some v
  | (Person_K, PersonElement v)  => Some v
  | (Author_K, AuthorElement v)  => Some v
  | (Contributor_K, ContributorElement v)  => Some v
  | (_ , _) => None
  end.


Definition getTypeByLKind (k : LinkKind) : Set :=
  match k with
  | ATOM_links_K => ATOM_links_t
  | ATOM_generator_K => ATOM_generator_t
  | ATOM_categories_K => ATOM_categories_t
  | ATOM_authors_K => ATOM_authors_t
  | ATOM_contributors_K => ATOM_contributors_t
  | ATOM_entrie_K => ATOM_entrie_t
  | Entry_links_K => Entry_links_t
  | Entry_source_K => Entry_source_t
  | Entry_content_K => Entry_content_t
  | Entry_categories_K => Entry_categories_t
  | Entry_authors_K => Entry_authors_t
  | Entry_contributors_K => Entry_contributors_t
  | Entry_atom_K => Entry_atom_t
  | Source_links_K => Source_links_t
  | Source_generator_K => Source_generator_t
  | Source_contributors_K => Source_contributors_t
  | Source_categories_K => Source_categories_t
  | Source_author_K => Source_author_t
  | Category_atom_K => Category_atom_t
  | Category_entry_K => Category_entry_t
  | Link_atom_K => Link_atom_t
  | Link_entry_K => Link_entry_t
  | Author_atom_K => Author_atom_t
  end.


Definition lift_LKind k : (getTypeByLKind k) -> Link :=
  match k with
  | ATOM_links_K => ATOM_linksLink
  | ATOM_generator_K => ATOM_generatorLink
  | ATOM_categories_K => ATOM_categoriesLink
  | ATOM_authors_K => ATOM_authorsLink
  | ATOM_contributors_K => ATOM_contributorsLink
  | ATOM_entrie_K => ATOM_entrieLink
  | Entry_links_K => Entry_linksLink
  | Entry_source_K => Entry_sourceLink
  | Entry_content_K => Entry_contentLink
  | Entry_categories_K => Entry_categoriesLink
  | Entry_authors_K => Entry_authorsLink
  | Entry_contributors_K => Entry_contributorsLink
  | Entry_atom_K => Entry_atomLink
  | Source_links_K => Source_linksLink
  | Source_generator_K => Source_generatorLink
  | Source_contributors_K => Source_contributorsLink
  | Source_categories_K => Source_categoriesLink
  | Source_author_K => Source_authorLink
  | Category_atom_K => Category_atomLink
  | Category_entry_K => Category_entryLink
  | Link_atom_K => Link_atomLink
  | Link_entry_K => Link_entryLink
  | Author_atom_K => Author_atomLink
  end.


Definition get_L_data (t : LinkKind) (c : Link) : option (getTypeByLKind t) :=
  match (t,c) as e return (option (getTypeByLKind (fst e))) with
  | (ATOM_links_K, ATOM_linksLink v)  => Some v
  | (ATOM_generator_K, ATOM_generatorLink v)  => Some v
  | (ATOM_categories_K, ATOM_categoriesLink v)  => Some v
  | (ATOM_authors_K, ATOM_authorsLink v)  => Some v
  | (ATOM_contributors_K, ATOM_contributorsLink v)  => Some v
  | (ATOM_entrie_K, ATOM_entrieLink v)  => Some v
  | (Entry_links_K, Entry_linksLink v)  => Some v
  | (Entry_source_K, Entry_sourceLink v)  => Some v
  | (Entry_content_K, Entry_contentLink v)  => Some v
  | (Entry_categories_K, Entry_categoriesLink v)  => Some v
  | (Entry_authors_K, Entry_authorsLink v)  => Some v
  | (Entry_contributors_K, Entry_contributorsLink v)  => Some v
  | (Entry_atom_K, Entry_atomLink v)  => Some v
  | (Source_links_K, Source_linksLink v)  => Some v
  | (Source_generator_K, Source_generatorLink v)  => Some v
  | (Source_contributors_K, Source_contributorsLink v)  => Some v
  | (Source_categories_K, Source_categoriesLink v)  => Some v
  | (Source_author_K, Source_authorLink v)  => Some v
  | (Category_atom_K, Category_atomLink v)  => Some v
  | (Category_entry_K, Category_entryLink v)  => Some v
  | (Link_atom_K, Link_atomLink v)  => Some v
  | (Link_entry_K, Link_entryLink v)  => Some v
  | (Author_atom_K, Author_atomLink v)  => Some v
  | (_ , _) => None
  end.

(** Typeclass Instance *)
Definition MM : Metamodel :=
{|
  ElementType := Element ;
  LinkType := Link ;
  elements_eq_dec := Element_eq_dec ;
|}.


#[export]
Instance ATOMElementDenotation : Denotation Element ElementKind :=
{
  denoteDatatype := getTypeByEKind ;
  unbox := get_E_data ;
  constructor := lift_EKind ;
}.


#[export]
Instance ATOMLinkDenotation : Denotation Link LinkKind :=
{
  denoteDatatype := getTypeByLKind ;
  unbox := get_L_data ;
  constructor := lift_LKind ;
}.


#[export]
Instance MMM : ModelingMetamodel MM :=
{
  elements := ATOMElementDenotation ;
  links := ATOMLinkDenotation ;
}.


Definition M := Model MM.

(** General functions (used in transformations) *)
Fixpoint getATOM_linksOnLinks (a : ATOM_t) (l : list Link) : option (list Link_t) :=
 match l with
  | (ATOM_linksLink x) :: l1 =>
    if ATOM_t_beq x.(ATOM_links_t_lglue) a
      then (Some x.(ATOM_links_t_rglue))
      else getATOM_linksOnLinks a l1
  | _ :: l1 => getATOM_linksOnLinks a l1
  | nil => None
 end.


Definition getATOM_links (m : M) (a : ATOM_t) : option (list Link_t) :=
  getATOM_linksOnLinks a m.(modelLinks).


Fixpoint getATOM_generatorOnLinks (a : ATOM_t) (l : list Link) : option (Generator_t) :=
 match l with
  | (ATOM_generatorLink x) :: l1 =>
    if ATOM_t_beq x.(ATOM_generator_t_lglue) a
      then (Some x.(ATOM_generator_t_rglue))
      else getATOM_generatorOnLinks a l1
  | _ :: l1 => getATOM_generatorOnLinks a l1
  | nil => None
 end.


Definition getATOM_generator (m : M) (a : ATOM_t) : option (Generator_t) :=
  getATOM_generatorOnLinks a m.(modelLinks).


Fixpoint getATOM_categoriesOnLinks (a : ATOM_t) (l : list Link) : option (list Category_t) :=
 match l with
  | (ATOM_categoriesLink x) :: l1 =>
    if ATOM_t_beq x.(ATOM_categories_t_lglue) a
      then (Some x.(ATOM_categories_t_rglue))
      else getATOM_categoriesOnLinks a l1
  | _ :: l1 => getATOM_categoriesOnLinks a l1
  | nil => None
 end.


Definition getATOM_categories (m : M) (a : ATOM_t) : option (list Category_t) :=
  getATOM_categoriesOnLinks a m.(modelLinks).


Fixpoint getATOM_authorsOnLinks (a : ATOM_t) (l : list Link) : option (list Author_t) :=
 match l with
  | (ATOM_authorsLink x) :: l1 =>
    if ATOM_t_beq x.(ATOM_authors_t_lglue) a
      then (Some x.(ATOM_authors_t_rglue))
      else getATOM_authorsOnLinks a l1
  | _ :: l1 => getATOM_authorsOnLinks a l1
  | nil => None
 end.


Definition getATOM_authors (m : M) (a : ATOM_t) : option (list Author_t) :=
  getATOM_authorsOnLinks a m.(modelLinks).


Fixpoint getATOM_contributorsOnLinks (a : ATOM_t) (l : list Link) : option (list Contributor_t) :=
 match l with
  | (ATOM_contributorsLink x) :: l1 =>
    if ATOM_t_beq x.(ATOM_contributors_t_lglue) a
      then (Some x.(ATOM_contributors_t_rglue))
      else getATOM_contributorsOnLinks a l1
  | _ :: l1 => getATOM_contributorsOnLinks a l1
  | nil => None
 end.


Definition getATOM_contributors (m : M) (a : ATOM_t) : option (list Contributor_t) :=
  getATOM_contributorsOnLinks a m.(modelLinks).


Fixpoint getATOM_entrieOnLinks (a : ATOM_t) (l : list Link) : option (list Entry_t) :=
 match l with
  | (ATOM_entrieLink x) :: l1 =>
    if ATOM_t_beq x.(ATOM_entrie_t_lglue) a
      then (Some x.(ATOM_entrie_t_rglue))
      else getATOM_entrieOnLinks a l1
  | _ :: l1 => getATOM_entrieOnLinks a l1
  | nil => None
 end.


Definition getATOM_entrie (m : M) (a : ATOM_t) : option (list Entry_t) :=
  getATOM_entrieOnLinks a m.(modelLinks).


Fixpoint getEntry_linksOnLinks (e : Entry_t) (l : list Link) : option (list Link_t) :=
 match l with
  | (Entry_linksLink x) :: l1 =>
    if Entry_t_beq x.(Entry_links_t_lglue) e
      then (Some x.(Entry_links_t_rglue))
      else getEntry_linksOnLinks e l1
  | _ :: l1 => getEntry_linksOnLinks e l1
  | nil => None
 end.


Definition getEntry_links (m : M) (e : Entry_t) : option (list Link_t) :=
  getEntry_linksOnLinks e m.(modelLinks).


Fixpoint getEntry_sourceOnLinks (e : Entry_t) (l : list Link) : option (Source_t) :=
 match l with
  | (Entry_sourceLink x) :: l1 =>
    if Entry_t_beq x.(Entry_source_t_lglue) e
      then (Some x.(Entry_source_t_rglue))
      else getEntry_sourceOnLinks e l1
  | _ :: l1 => getEntry_sourceOnLinks e l1
  | nil => None
 end.


Definition getEntry_source (m : M) (e : Entry_t) : option (Source_t) :=
  getEntry_sourceOnLinks e m.(modelLinks).


Fixpoint getEntry_contentOnLinks (e : Entry_t) (l : list Link) : option (Content_t) :=
 match l with
  | (Entry_contentLink x) :: l1 =>
    if Entry_t_beq x.(Entry_content_t_lglue) e
      then (Some x.(Entry_content_t_rglue))
      else getEntry_contentOnLinks e l1
  | _ :: l1 => getEntry_contentOnLinks e l1
  | nil => None
 end.


Definition getEntry_content (m : M) (e : Entry_t) : option (Content_t) :=
  getEntry_contentOnLinks e m.(modelLinks).


Fixpoint getEntry_categoriesOnLinks (e : Entry_t) (l : list Link) : option (list Category_t) :=
 match l with
  | (Entry_categoriesLink x) :: l1 =>
    if Entry_t_beq x.(Entry_categories_t_lglue) e
      then (Some x.(Entry_categories_t_rglue))
      else getEntry_categoriesOnLinks e l1
  | _ :: l1 => getEntry_categoriesOnLinks e l1
  | nil => None
 end.


Definition getEntry_categories (m : M) (e : Entry_t) : option (list Category_t) :=
  getEntry_categoriesOnLinks e m.(modelLinks).


Fixpoint getEntry_authorsOnLinks (e : Entry_t) (l : list Link) : option (list Author_t) :=
 match l with
  | (Entry_authorsLink x) :: l1 =>
    if Entry_t_beq x.(Entry_authors_t_lglue) e
      then (Some x.(Entry_authors_t_rglue))
      else getEntry_authorsOnLinks e l1
  | _ :: l1 => getEntry_authorsOnLinks e l1
  | nil => None
 end.


Definition getEntry_authors (m : M) (e : Entry_t) : option (list Author_t) :=
  getEntry_authorsOnLinks e m.(modelLinks).


Fixpoint getEntry_contributorsOnLinks (e : Entry_t) (l : list Link) : option (list Contributor_t) :=
 match l with
  | (Entry_contributorsLink x) :: l1 =>
    if Entry_t_beq x.(Entry_contributors_t_lglue) e
      then (Some x.(Entry_contributors_t_rglue))
      else getEntry_contributorsOnLinks e l1
  | _ :: l1 => getEntry_contributorsOnLinks e l1
  | nil => None
 end.


Definition getEntry_contributors (m : M) (e : Entry_t) : option (list Contributor_t) :=
  getEntry_contributorsOnLinks e m.(modelLinks).


Fixpoint getEntry_atomOnLinks (e : Entry_t) (l : list Link) : option (ATOM_t) :=
 match l with
  | (Entry_atomLink x) :: l1 =>
    if Entry_t_beq x.(Entry_atom_t_lglue) e
      then (Some x.(Entry_atom_t_rglue))
      else getEntry_atomOnLinks e l1
  | _ :: l1 => getEntry_atomOnLinks e l1
  | nil => None
 end.


Definition getEntry_atom (m : M) (e : Entry_t) : option (ATOM_t) :=
  getEntry_atomOnLinks e m.(modelLinks).


Fixpoint getSource_linksOnLinks (s : Source_t) (l : list Link) : option (list Link_t) :=
 match l with
  | (Source_linksLink x) :: l1 =>
    if Source_t_beq x.(Source_links_t_lglue) s
      then (Some x.(Source_links_t_rglue))
      else getSource_linksOnLinks s l1
  | _ :: l1 => getSource_linksOnLinks s l1
  | nil => None
 end.


Definition getSource_links (m : M) (s : Source_t) : option (list Link_t) :=
  getSource_linksOnLinks s m.(modelLinks).


Fixpoint getSource_generatorOnLinks (s : Source_t) (l : list Link) : option (Generator_t) :=
 match l with
  | (Source_generatorLink x) :: l1 =>
    if Source_t_beq x.(Source_generator_t_lglue) s
      then (Some x.(Source_generator_t_rglue))
      else getSource_generatorOnLinks s l1
  | _ :: l1 => getSource_generatorOnLinks s l1
  | nil => None
 end.


Definition getSource_generator (m : M) (s : Source_t) : option (Generator_t) :=
  getSource_generatorOnLinks s m.(modelLinks).


Fixpoint getSource_contributorsOnLinks (s : Source_t) (l : list Link) : option (list Contributor_t) :=
 match l with
  | (Source_contributorsLink x) :: l1 =>
    if Source_t_beq x.(Source_contributors_t_lglue) s
      then (Some x.(Source_contributors_t_rglue))
      else getSource_contributorsOnLinks s l1
  | _ :: l1 => getSource_contributorsOnLinks s l1
  | nil => None
 end.


Definition getSource_contributors (m : M) (s : Source_t) : option (list Contributor_t) :=
  getSource_contributorsOnLinks s m.(modelLinks).


Fixpoint getSource_categoriesOnLinks (s : Source_t) (l : list Link) : option (list Category_t) :=
 match l with
  | (Source_categoriesLink x) :: l1 =>
    if Source_t_beq x.(Source_categories_t_lglue) s
      then (Some x.(Source_categories_t_rglue))
      else getSource_categoriesOnLinks s l1
  | _ :: l1 => getSource_categoriesOnLinks s l1
  | nil => None
 end.


Definition getSource_categories (m : M) (s : Source_t) : option (list Category_t) :=
  getSource_categoriesOnLinks s m.(modelLinks).


Fixpoint getSource_authorOnLinks (s : Source_t) (l : list Link) : option (Author_t) :=
 match l with
  | (Source_authorLink x) :: l1 =>
    if Source_t_beq x.(Source_author_t_lglue) s
      then (Some x.(Source_author_t_rglue))
      else getSource_authorOnLinks s l1
  | _ :: l1 => getSource_authorOnLinks s l1
  | nil => None
 end.


Definition getSource_author (m : M) (s : Source_t) : option (Author_t) :=
  getSource_authorOnLinks s m.(modelLinks).


Fixpoint getCategory_atomOnLinks (c : Category_t) (l : list Link) : option (ATOM_t) :=
 match l with
  | (Category_atomLink x) :: l1 =>
    if Category_t_beq x.(Category_atom_t_lglue) c
      then (Some x.(Category_atom_t_rglue))
      else getCategory_atomOnLinks c l1
  | _ :: l1 => getCategory_atomOnLinks c l1
  | nil => None
 end.


Definition getCategory_atom (m : M) (c : Category_t) : option (ATOM_t) :=
  getCategory_atomOnLinks c m.(modelLinks).


Fixpoint getCategory_entryOnLinks (c : Category_t) (l : list Link) : option (Entry_t) :=
 match l with
  | (Category_entryLink x) :: l1 =>
    if Category_t_beq x.(Category_entry_t_lglue) c
      then (Some x.(Category_entry_t_rglue))
      else getCategory_entryOnLinks c l1
  | _ :: l1 => getCategory_entryOnLinks c l1
  | nil => None
 end.


Definition getCategory_entry (m : M) (c : Category_t) : option (Entry_t) :=
  getCategory_entryOnLinks c m.(modelLinks).


Fixpoint getLink_atomOnLinks (_l : Link_t) (l : list Link) : option (ATOM_t) :=
 match l with
  | (Link_atomLink x) :: l1 =>
    if Link_t_beq x.(Link_atom_t_lglue) _l
      then (Some x.(Link_atom_t_rglue))
      else getLink_atomOnLinks _l l1
  | _ :: l1 => getLink_atomOnLinks _l l1
  | nil => None
 end.


Definition getLink_atom (m : M) (l : Link_t) : option (ATOM_t) :=
  getLink_atomOnLinks l m.(modelLinks).


Fixpoint getLink_entryOnLinks (_l : Link_t) (l : list Link) : option (Entry_t) :=
 match l with
  | (Link_entryLink x) :: l1 =>
    if Link_t_beq x.(Link_entry_t_lglue) _l
      then (Some x.(Link_entry_t_rglue))
      else getLink_entryOnLinks _l l1
  | _ :: l1 => getLink_entryOnLinks _l l1
  | nil => None
 end.


Definition getLink_entry (m : M) (l : Link_t) : option (Entry_t) :=
  getLink_entryOnLinks l m.(modelLinks).


Fixpoint getAuthor_atomOnLinks (a : Author_t) (l : list Link) : option (ATOM_t) :=
 match l with
  | (Author_atomLink x) :: l1 =>
    if Author_t_beq x.(Author_atom_t_lglue) a
      then (Some x.(Author_atom_t_rglue))
      else getAuthor_atomOnLinks a l1
  | _ :: l1 => getAuthor_atomOnLinks a l1
  | nil => None
 end.


Definition getAuthor_atom (m : M) (a : Author_t) : option (ATOM_t) :=
  getAuthor_atomOnLinks a m.(modelLinks).



