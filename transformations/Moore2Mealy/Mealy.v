

(********************************************************************
	@name Coq declarations for metamodel: <Mealy>
	@date 2022/01/29 12:14:52
	@description Automatically generated by Ecore2Coq transformation.
 ********************************************************************)

(* Coq libraries *)
Require Import String.
Require Import Bool.
Require Import List.      (* sequence *)
Require Import Multiset.  (* bag *)
Require Import ListSet.   (* set *)
Require Import PeanoNat.
Require Import EqNat.
Require Import Coq.Logic.Eqdep_dec.
Scheme Equality for option. (* equality for option type *)

From core Require Import 
  utils.Utils
  Metamodel
  modeling.ModelingMetamodel
  Model
  utils.CpdtTactics
  Tactics.

(* Base types *)


Record State : Set :=
  BuildState 
  { name :  string }.

Record Transition : Set :=
  BuildTransition 
  { input :  string ;
    output :  string 
  }.



Record TransitionSource : Set :=
   BuildTransitionSource 
   { s_tr : Transition ;
     s_st : State 
   }.

Definition maybeBuildTransitionSource (tr_arg: Transition) (so_arg: option (State)) : option TransitionSource :=
  match tr_arg, so_arg with
  | tr_arg_succ, Some so_arg_succ => Some (BuildTransitionSource tr_arg_succ so_arg_succ)
  | _, _ => None
  end.

Record TransitionTarget : Set :=
  BuildTransitionTarget 
    { t_tr : Transition ;
      t_st : State 
    }.

Definition maybeBuildTransitionTarget (tr_arg: Transition) (ta_arg: option (State)) : option TransitionTarget :=
  match tr_arg, ta_arg with
  | tr_arg_succ, Some ta_arg_succ => Some (BuildTransitionTarget tr_arg_succ ta_arg_succ)
  | _, _ => None
  end.



(* Accessors *)

Definition beq_State (st_arg1 : State) (st_arg2 : State) : bool :=
  beq_string st_arg1.(name) st_arg2.(name).

Definition beq_Transition (tr_arg1 : Transition) (tr_arg2 : Transition) : bool :=
(  beq_string tr_arg1.(input) tr_arg2.(input) ) && 
(  beq_string tr_arg1.(output) tr_arg2.(output) )
.


(* Meta-types (kinds) *)	
Inductive ElementKind : Set :=
  | State_K
  | Transition_K
.

Definition MealyMetamodel_getTypeByClass (mecl_arg : ElementKind) : Set :=
  match mecl_arg with
    | State_K => State
    | Transition_K => Transition
  end.	

Inductive LinkKind : Set :=
  | TransitionSource_K
  | TransitionTarget_K
.

Definition MealyMetamodel_getTypeByReference (mere_arg : LinkKind) : Set :=
  match mere_arg with
| TransitionSource_K => TransitionSource
| TransitionTarget_K => TransitionTarget
  end.

Definition MealyMetamodel_getERoleTypesByEReference (mere_arg : LinkKind) : Set :=
  match mere_arg with
| TransitionSource_K => (Transition * State)
| TransitionTarget_K => (Transition * State)
  end.

(* Generic types *)			
Inductive MealyMetamodel_Object : Set :=
 | Build_MealyMetamodel_Object : 
    forall (mecl_arg: ElementKind), (MealyMetamodel_getTypeByClass mecl_arg) -> MealyMetamodel_Object.

Definition beq_MealyMetamodel_Object (c1 : MealyMetamodel_Object) (c2 : MealyMetamodel_Object) : bool :=
  match c1, c2 with
  | Build_MealyMetamodel_Object State_K o1, Build_MealyMetamodel_Object State_K o2 => beq_State o1 o2
  | Build_MealyMetamodel_Object Transition_K o1, Build_MealyMetamodel_Object Transition_K o2 => beq_Transition o1 o2
  | _, _ => false
  end.

Inductive MealyMetamodel_Link : Set :=
 | Build_MealyMetamodel_Link : 
    forall (mere_arg: LinkKind), (MealyMetamodel_getTypeByReference mere_arg) -> MealyMetamodel_Link.

(* FIXME *)
Definition beq_MealyMetamodel_Link (l1 : MealyMetamodel_Link) (l2 : MealyMetamodel_Link) : bool := true.

(* Reflective functions *)
Lemma MealyMetamodel_eqEClass_dec : 
 forall (mecl_arg1: ElementKind) (mecl_arg2: ElementKind), { mecl_arg1 = mecl_arg2 } + { mecl_arg1 <> mecl_arg2 }.
Proof. repeat decide equality. Defined.

Lemma MealyMetamodel_eqEReference_dec : 
 forall (mere_arg1: LinkKind) (mere_arg2: LinkKind), { mere_arg1 = mere_arg2 } + { mere_arg1 <> mere_arg2 }.
Proof. repeat decide equality. Defined.

Definition MealyMetamodel_getEClass (meob_arg : MealyMetamodel_Object) : ElementKind :=
   match meob_arg with
  | (Build_MealyMetamodel_Object meob_arg _) => meob_arg
   end.

Definition MealyMetamodel_getEReference (meli_arg : MealyMetamodel_Link) : LinkKind :=
   match meli_arg with
  | (Build_MealyMetamodel_Link meli_arg _) => meli_arg
   end.



Definition MealyMetamodel_toClass (mecl_arg : ElementKind) (meob_arg : MealyMetamodel_Object) : option (MealyMetamodel_getTypeByClass mecl_arg).
Proof.
  destruct meob_arg as [arg1 arg2].
  unfold MealyMetamodel_getTypeByClass in arg2.
  destruct arg1 ; destruct mecl_arg.
  exact (Some arg2).
  exact (None).
  exact (None).
  exact (Some arg2).
Defined.

Definition MealyMetamodel_toReference (mere_arg : LinkKind) (meli_arg : MealyMetamodel_Link) : option (MealyMetamodel_getTypeByReference mere_arg).
Proof.
  destruct meli_arg as [arg1 arg2].
  destruct (MealyMetamodel_eqEReference_dec arg1 mere_arg) as [e|] eqn:dec_case.
  - rewrite e in arg2.
  	exact (Some arg2).
  - exact None.
Defined.

(* Generic functions *)

Definition MealyMetamodel_Metamodel_Instance : 
  Metamodel :=
  {|
    ElementType := MealyMetamodel_Object;
    LinkType := MealyMetamodel_Link;
    elements_eqdec :=beq_MealyMetamodel_Object ;
    links_eqdec := beq_MealyMetamodel_Link
  |}.


Definition MealyModel := Model MealyMetamodel_Metamodel_Instance.

Definition MealyMetamodel_toObject (mecl_arg: ElementKind) (t: MealyMetamodel_getTypeByClass mecl_arg) : MealyMetamodel_Object :=
  (Build_MealyMetamodel_Object mecl_arg t).

Definition MealyMetamodel_toLink (mere_arg: LinkKind) (t: MealyMetamodel_getTypeByReference mere_arg) : MealyMetamodel_Link :=
  (Build_MealyMetamodel_Link mere_arg t).





Fixpoint Transition_getSourceOnLinks (tr_arg : Transition) (l : list MealyMetamodel_Link) : option (State) :=
match l with
| (Build_MealyMetamodel_Link TransitionSource_K (BuildTransitionSource Transition_ctr source_ctr)) :: l' => 
	  if beq_Transition Transition_ctr tr_arg then Some source_ctr else Transition_getSourceOnLinks tr_arg l'
| _ :: l' => Transition_getSourceOnLinks tr_arg l'
| nil => None
end.

Definition Transition_getSource (tr_arg : Transition) (m : MealyModel) : option (State) :=
  Transition_getSourceOnLinks tr_arg m.(modelLinks).
  
Definition Transition_getSourceObject (tr_arg : Transition) (m : MealyModel) : option (MealyMetamodel_Object) :=
  match Transition_getSource tr_arg m with
  | Some st_arg => Some (MealyMetamodel_toObject State_K st_arg) 
  | _ => None
  end.
Fixpoint Transition_getTargetOnLinks (tr_arg : Transition) (l : list MealyMetamodel_Link) : option (State) :=
match l with
| (Build_MealyMetamodel_Link TransitionTarget_K (BuildTransitionTarget Transition_ctr target_ctr)) :: l' => 
	  if beq_Transition Transition_ctr tr_arg then Some target_ctr else Transition_getTargetOnLinks tr_arg l'
| _ :: l' => Transition_getTargetOnLinks tr_arg l'
| nil => None
end.

Definition Transition_getTarget (tr_arg : Transition) (m : MealyModel) : option (State) :=
  Transition_getTargetOnLinks tr_arg m.(modelLinks).
  
Definition Transition_getTargetObject (tr_arg : Transition) (m : MealyModel) : option (MealyMetamodel_Object) :=
  match Transition_getTarget tr_arg m with
  | Some st_arg => Some (MealyMetamodel_toObject State_K st_arg) 
  | _ => None
  end.


(* Typeclass Instances *)	

#[export]
Instance MealyMetamodel_ElementDenotation : Denotation MealyMetamodel_Object ElementKind :=
{
	denoteDatatype := MealyMetamodel_getTypeByClass;
	unbox := MealyMetamodel_toClass;
	constructor := MealyMetamodel_toObject;
}.

#[export]
Instance MealyMetamodel_LinkDenotation : Denotation MealyMetamodel_Link LinkKind :=
{
	denoteDatatype := MealyMetamodel_getTypeByReference;
	unbox := MealyMetamodel_toReference;
	constructor := MealyMetamodel_toLink;
}.



#[export]
Instance MealyMetamodel_ModelingMetamodel_Instance : 
	ModelingMetamodel MealyMetamodel_Metamodel_Instance :=
{ 
    elements := MealyMetamodel_ElementDenotation;
    links := MealyMetamodel_LinkDenotation; 
}.

(* Useful lemmas *)

Lemma Mealy_invert : 
  forall (mecl_arg: ElementKind) (t1 t2: MealyMetamodel_getTypeByClass mecl_arg), 
    Build_MealyMetamodel_Object mecl_arg t1 = Build_MealyMetamodel_Object mecl_arg t2 -> t1 = t2.
Proof.
  intros ; Tactics.dep_inversion H ; assumption.
Qed.


(* Not Used *)
Definition MealyMetamodel_instanceOfEClass :
  ElementKind -> MealyMetamodel_Object -> bool :=
  MealyMetamodel_ElementDenotation.(instanceof).

Definition MealyMetamodel_instanceOfEReference :
  LinkKind -> MealyMetamodel_Link -> bool :=
  MealyMetamodel_LinkDenotation.(instanceof).

